#!/usr/bin/perl

# This script performs a two-step dialing: first it connects to the operator
# as specified in --me option, and then performs the outbound call to a
# specified destination.
# The destination number is searched through the specified dialplan context.
# This is done in order to leave the outboud gateway selection to the
# standard FreeSWITCH dialplan.

# Usage example:
# /opt/freeswitch-helper-scripts/esl/two_step_dial \
#    --me=user/704@sip.domain.com \
#    --dest=0266937870 --context=outbound.domain.com --cid=0279885844 \
#    --verbose





use strict;
use warnings;
use Getopt::Long;
use ESL;
use Time::HiRes;
use POSIX;

$| = 1;

my $fs_host = '127.0.0.1';
my $fs_port = 8021;
my $fs_password = 'ClueCon';


my $me_bridgestr;
my $dest;
my $context = 'default';
my $callerid;
my $verbose;

my $help_needed;

my $ok = GetOptions
    (
     'fs_host=s'     => \$fs_host,
     'fs_port=s'     => \$fs_port,
     'fs_password=s' => \$fs_password,
     'me=s'          => \$me_bridgestr,
     'dest=s'        => \$dest,
     'context=s'     => \$context,
     'cid=s'         => \$callerid,
     'verbose'       => \$verbose,
     'help'          => \$help_needed,
    );


if( not $ok or $help_needed or scalar(@ARGV) > 0 or
    not $me_bridgestr or not $dest or not $callerid )
{
    print STDERR "Usage: $0 --me=user/704 " .
        "--dest=12126647665 --cid=13115552368 ...\n",
    "Options:\n",
    "  --fs_host=HOST    \[$fs_host\] FreeSWITCH host\n",
    "  --fs_port=PORT    \[$fs_port\] FreeSWITCH ESL port\n",
    "  --fs_password=PW  \[$fs_password\] FreeSWITCH ESL password\n",
    "  --me=STRING       operator bridge string\n",
    "  --dest=STRING     destination number\n",
    "  --context=STRING  \[$context\] dialplan context for destination\n",
    "  --cid=NUMBER      caller ID\n",
    "  --verbose         print extra info to STDERR\n",
    "  --help            this help message\n";
    exit 1;
}


my $esl = new ESL::ESLconnection($fs_host,
                                 sprintf('%d', $fs_port),
                                 $fs_password);

$esl->connected() or die("Cannot connect to FreeSWITCH");
info("Connected to $fs_host:$fs_port");

my $uuid = $esl->api('create_uuid')->getBody();
info("Created UUID: $uuid");

info("Calling the operator at $me_bridgestr");

$ok = 1;

my $res = $esl->api(
    'originate ' .
    '{ignore_early_media=true,' .
    'origination_uuid=' . $uuid . ',' . 
    'originate_timeout=60,' .
    'origination_caller_id_number=' . $callerid . ',' .
    'origination_caller_id_name=' . $callerid . '}' .
    $me_bridgestr .
    ' &park()');

my $status = $res->getBody;
$status =~ s/\s+$//s;

if( $status =~ /^\+OK/ )
{
    info("Operator answered. Connecting to $dest");
    $esl->api('uuid_setvar ' . $uuid .
              ' effective_caller_id_number ' . $callerid);
    $esl->api('uuid_setvar ' . $uuid .
              ' effective_caller_id_name ' . $callerid);
    
    $esl->bgapi('uuid_transfer ' . $uuid . ' ' . $dest . ' XML  ' . $context);
    info("Outbound call initiated in the background");
}
else
{
    info("Cannot connect to $me_bridgestr: ", $status);
    $ok = 0;
}
    

$esl->disconnect();
info("Finished");

exit($ok?0:1);
           


sub info
{
    if( $verbose )
    {
        my ($time_epoch, $time_hires) = Time::HiRes::gettimeofday();
        print STDERR
            sprintf("%s.%.6d: ",
                    POSIX::strftime('%Y-%m-%d %H:%M:%S',
                                    localtime($time_epoch)),
                    $time_hires),
            @_, "\n";
    }
}
